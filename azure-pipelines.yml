# Azure SQL Database Deployment Pipeline - pymssql Version
trigger:
- main

pool:
  name: 'Default'

variables:
  sqlServerName: 'sqlserver-dataops-demo-milan.database.windows.net'
  databaseName: 'db-employees-demo'

stages:
- stage: ValidateAndDeploy
  displayName: 'Validate and Deploy SQL Changes'
  jobs:
  - job: DeploySQL
    displayName: 'Deploy SQL to Azure Database'
    steps:
    
    - checkout: self
      displayName: '📥 Get SQL files from GitHub'
    
    - script: |
        echo "🔍 Validating SQL files..."
        echo "Repository structure:"
        find . -name "*.sql" -type f
        echo ""
        echo "📄 SQL files found:"
        ls -la sql/
        echo ""
        echo "📝 Content preview of create_tables.sql:"
        head -15 sql/create_tables.sql
      displayName: '🔍 Validate SQL Files'
    
    - script: |
        echo "📦 Installing Python packages for SQL Server..."
        
        # Install required Python packages (pymssql instead of pyodbc)
        pip3 install pymssql sqlalchemy pandas
        
        echo "✅ Python packages installed successfully"
      displayName: '📦 Install Python SQL Dependencies'
    
    - script: |
        echo "🔗 Testing connection to Azure SQL Database..."
        
        python3 << 'EOF'
        import pymssql
        import sys
        
        # Connection parameters
        server = '$(sqlServerName)'
        database = '$(databaseName)'
        username = '$(sqlUsername)'
        password = '$(sqlPassword)'
        
        try:
            print(f"Connecting to server: {server}")
            print(f"Database: {database}")
            print(f"Username: {username}")
            
            # Test connection
            conn = pymssql.connect(
                server=server,
                user=username,
                password=password,
                database=database,
                timeout=30,
                login_timeout=30
            )
            
            cursor = conn.cursor()
            
            # Test query
            cursor.execute("SELECT GETDATE() as CurrentTime, @@VERSION as SQLVersion")
            row = cursor.fetchone()
            print(f"✅ Connection successful!")
            print(f"Current time: {row[0]}")
            print(f"SQL Server version: {row[1][:50]}...")
            
            conn.close()
            
        except Exception as e:
            print(f"❌ Connection failed: {str(e)}")
            sys.exit(1)
        EOF
        
        echo "✅ Database connection test completed"
      displayName: '🔗 Test Database Connection'
    
    - script: |
        echo "🚀 Executing SQL deployment script..."
        
        python3 << 'EOF'
        import pymssql
        import sys
        import re
        
        # Connection parameters
        server = '$(sqlServerName)'
        database = '$(databaseName)'
        username = '$(sqlUsername)'
        password = '$(sqlPassword)'
        
        try:
            # Read SQL file
            with open('sql/create_tables.sql', 'r') as file:
                sql_script = file.read()
            
            # Replace database name placeholder
            sql_script = sql_script.replace('USE [your-database-name];', f'USE [{database}];')
            
            print("📄 SQL Script to execute:")
            print("-" * 50)
            print(sql_script[:800] + "..." if len(sql_script) > 800 else sql_script)
            print("-" * 50)
            
            # Connect and execute
            conn = pymssql.connect(
                server=server,
                user=username,
                password=password,
                database=database,
                timeout=30,
                login_timeout=30
            )
            
            cursor = conn.cursor()
            
            # Split script by GO statements and execute each batch
            batches = re.split(r'\bGO\b', sql_script, flags=re.IGNORECASE)
            
            for i, batch in enumerate(batches):
                batch = batch.strip()
                if batch and not batch.upper().startswith('USE'):  # Skip USE statements
                    print(f"Executing batch {i+1}...")
                    try:
                        cursor.execute(batch)
                        conn.commit()
                        print(f"✅ Batch {i+1} executed successfully")
                    except Exception as batch_error:
                        print(f"⚠️ Batch {i+1} warning: {str(batch_error)}")
                        # Continue with other batches
            
            conn.close()
            print("✅ SQL script execution completed!")
            
        except Exception as e:
            print(f"❌ SQL execution failed: {str(e)}")
            sys.exit(1)
        EOF
        
        echo "🎉 SQL deployment completed"
      displayName: '🚀 Deploy SQL Changes'
    
    - script: |
        echo "✅ Verifying deployment results..."
        
        python3 << 'EOF'
        import pymssql
        import sys
        
        # Connection parameters
        server = '$(sqlServerName)'
        database = '$(databaseName)'
        username = '$(sqlUsername)'
        password = '$(sqlPassword)'
        
        try:
            conn = pymssql.connect(
                server=server,
                user=username,
                password=password,
                database=database,
                timeout=30,
                login_timeout=30
            )
            
            cursor = conn.cursor()
            
            # Check if table exists
            cursor.execute("""
                SELECT COUNT(*) as table_exists 
                FROM INFORMATION_SCHEMA.TABLES 
                WHERE TABLE_NAME = 'employees'
            """)
            
            table_exists = cursor.fetchone()[0]
            
            if table_exists > 0:
                print("✅ employees table exists!")
                
                # Get record count
                cursor.execute("SELECT COUNT(*) FROM employees")
                count = cursor.fetchone()[0]
                print(f"📊 Total records: {count}")
                
                # Show sample data
                cursor.execute("SELECT TOP 3 first_name, last_name, department, hire_date FROM employees")
                rows = cursor.fetchall()
                
                print("📋 Sample data:")
                for row in rows:
                    print(f"  - {row[0]} {row[1]}, {row[2]}, hired: {row[3]}")
                    
            else:
                print("❌ employees table not found!")
                # Show what tables do exist
                cursor.execute("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'")
                tables = cursor.fetchall()
                table_names = [table[0] for table in tables]
                print(f"Available tables: {table_names}")
                sys.exit(1)
            
            conn.close()
            
        except Exception as e:
            print(f"❌ Verification failed: {str(e)}")
            sys.exit(1)
        EOF
        
        echo "🎉 Deployment verification completed successfully!"
      displayName: '✅ Verify Deployment'