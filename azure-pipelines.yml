# Azure SQL Database Deployment Pipeline - Fixed Version
trigger:
- main

pool:
  name: 'Default'

variables:
  sqlServerName: 'sqlserver-dataops-demo-milan.database.windows.net'
  databaseName: 'db-employees-demo'

stages:
- stage: ValidateAndDeploy
  displayName: 'Validate and Deploy SQL Changes'
  jobs:
  - job: DeploySQL
    displayName: 'Deploy SQL to Azure Database'
    steps:
    
    - checkout: self
      displayName: 'üì• Get SQL files from GitHub'
    
    - script: |
        echo "üîç Validating SQL files..."
        echo "Repository structure:"
        find . -name "*.sql" -type f
        echo ""
        echo "üìÑ SQL files found:"
        ls -la sql/
        echo ""
        echo "üìù Content preview of create_tables.sql:"
        head -10 sql/create_tables.sql
      displayName: 'üîç Validate SQL Files'
    
    - script: |
        echo "üì¶ Installing/Checking SQL Server tools..."
        
        # Check if Homebrew is installed
        if ! command -v brew &> /dev/null; then
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        
        # Install or update mssql-tools
        echo "Installing Microsoft SQL Server tools..."
        brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release || true
        brew update
        
        # Accept EULA and install
        HOMEBREW_NO_ENV_FILTERING=1 ACCEPT_EULA=Y brew install mssql-tools18 || true
        
        # Add to PATH
        export PATH="/opt/homebrew/bin:$PATH"
        export PATH="/opt/homebrew/opt/mssql-tools18/bin:$PATH"
        
        # Verify installation
        echo "Checking sqlcmd installation..."
        which sqlcmd || echo "sqlcmd not found in PATH"
        /opt/homebrew/opt/mssql-tools18/bin/sqlcmd -? || echo "Direct path test failed"
        
        echo "‚úÖ SQL tools setup completed"
      displayName: 'üì¶ Install SQL Command Line Tools'
    
    - script: |
        echo "üîó Testing connection to Azure SQL Database..."
        echo "Server: $(sqlServerName)"
        echo "Database: $(databaseName)"
        echo "Username: $(sqlUsername)"
        
        # Set PATH to include sqlcmd
        export PATH="/opt/homebrew/opt/mssql-tools18/bin:$PATH"
        
        # Test with different connection parameters
        echo "Testing connection with trust server certificate..."
        
        sqlcmd -S $(sqlServerName) -d $(databaseName) -U $(sqlUsername) -P $(sqlPassword) -C -l 30 -Q "SELECT GETDATE() as CurrentTime"
        
        connection_result=$?
        if [ $connection_result -eq 0 ]; then
            echo "‚úÖ Database connection successful!"
        else
            echo "‚ùå Database connection failed with exit code: $connection_result"
            echo "Trying alternative connection method..."
            
            # Try without specifying database initially
            sqlcmd -S $(sqlServerName) -U $(sqlUsername) -P $(sqlPassword) -C -l 30 -Q "SELECT GETDATE() as CurrentTime; SELECT name FROM sys.databases"
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Server connection successful, but database-specific connection failed"
            else
                echo "‚ùå Complete connection failure"
                exit 1
            fi
        fi
      displayName: 'üîó Test Database Connection'
    
    - script: |
        echo "üöÄ Executing SQL deployment script..."
        
        # Set PATH
        export PATH="/opt/homebrew/opt/mssql-tools18/bin:$PATH"
        
        # Update the USE statement in SQL file
        sed "s/USE \[your-database-name\]/USE [$(databaseName)]/" sql/create_tables.sql > sql/create_tables_updated.sql
        
        echo "Updated SQL content:"
        cat sql/create_tables_updated.sql
        
        # Execute the SQL script
        sqlcmd -S $(sqlServerName) -d $(databaseName) -U $(sqlUsername) -P $(sqlPassword) -C -l 30 -i sql/create_tables_updated.sql
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ SQL script executed successfully!"
        else
            echo "‚ùå SQL script execution failed!"
            exit 1
        fi
      displayName: 'üöÄ Deploy SQL Changes'
      condition: succeededOrFailed()
    
    - script: |
        echo "‚úÖ Verifying deployment results..."
        
        # Set PATH
        export PATH="/opt/homebrew/opt/mssql-tools18/bin:$PATH"
        
        # Check if table exists
        sqlcmd -S $(sqlServerName) -d $(databaseName) -U $(sqlUsername) -P $(sqlPassword) -C -l 30 -Q "
        IF EXISTS (SELECT * FROM sys.tables WHERE name = 'employees')
        BEGIN
            SELECT 'SUCCESS: employees table exists!' as Status;
            SELECT COUNT(*) as TotalRecords FROM employees;
            SELECT TOP 3 first_name, last_name, department FROM employees;
        END
        ELSE
        BEGIN
            SELECT 'ERROR: employees table not found!' as Status;
        END
        "
        
        echo "üéâ Deployment verification completed!"
      displayName: '‚úÖ Verify Deployment'
      condition: succeededOrFailed()